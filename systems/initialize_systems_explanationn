Document de text per explicar detalladament les funcions que inicialitzen el sistema.



COMENTARI INICIAL: Els estats (fonamental i excitats) s'indicaran per mitjà d'etiquetes tipus string. Els estats possibles
i les seves respectives referències hauran de venir indicades a l'inici del programa, e.g, quan s'inicialitzi la
molècula genèrica. Aquestes referències s'usaran per caracteritzar la variable estat i per simplicitat i eficiència
s'usaran com a claus dels diccionaris que contenguin informació sobre els excitons. A saber: state_energies,
relaxation_energies, exciton_energies, (REFERENTS A RATES...).



FITXER: initialize_systems.py

Arguments necessaris per inicialitzar qualsevol sistema:
- conditions: diccionari amb les condicions físiques del sistema com la temperatura o l'índex de refracció del medi.
    Aquesta variable podria no ser necessària. Per ara només es modifica afegint-li els paràmetres de la morfologia
    del sistema (dimensions, paràmetre de xarxa)
- generic_molecule: instància de la classe Molecule. Aquesta recull la naturalesa de la molècula i s'inicialitza amb
    una posició i orientació per defecte. (Veure amb més detall en l'apartat 'molecules')
    (Afegir on i com inicialitzar-la)
-order: paràmetre string. Té dues possibilitats: 'ordered' o 'disordered'. Indica si tenim un material ordenat (cristal·lí)
    o desordenat (amorf).

-dimensionality: Enter. Número de dimensions del sistema, tendrà interès per altres funcions.
-dimensions: Lista de 3 elements. Dimensions del sistema, sempre donades en 3D i agafant 0 les coordenades oportunes
    si volem un sistema de menor dimensionalitat
-num_molecules: Enter. Número de molècules que ha de generar el sistema. Només és necessari per un sistema desordenat.
    Per un sistema ordenat el número vendria donat pel número de sites possibles.
-lattice_parameter: Real. Caracteritza el sistema ordenat amb el seu paràmetre de xarxa. D'aquest dependrà el número de
    molècules del sistema ordenat.
-orientation: Paràmetre string. Indica com volem orientades les molècules unes respecte d'altres. Es contemplen 3 opcions:
    'parallel', 'antiparallel' i 'random'. Tot i que pel sistema desordenat no tenim ben definit l'antiparal·lelisme.
-reference_orientation: només serà usat si l'orientació no és aleatòria. Dirà a quina direcció han de ser (anti)paral·leles
    les molècules que generem.
-excitons: diccionari amb l'informació dels excitons a generar. Les claus són les referències dels possibles estats
    excitats i els arguments una llista amb les posicions de les excitacions (Veure amb més detall a l'apartat
    'excitacion')


RETORNS:
Diccionari anomenat system amb (per ara) 3 entrades:
        'molecules': llista de les instàncies Molecule creades
        'conditions': diccionari amb les condicions físiques al que hem afegit les dimensions del sistema i si escau
            el paràmetre de xarxa.
        'centre_indexes': llista dels índexs de les molècules excitades (sigui quin sigui l'estat).s



Funció: get_homogeneous_system().
    Reb tots els paràmetres esmentats anteriorment i redirigeix el programa cap a una altre funció segons si el volem
    un sistema ordenat o desordenat.

Funció: get_disordered_system().
    Reb tots els paràmetres MENYS ordre i lattice_parameter. Genera un sistema amb les molècules distribuïdes aleatòriament.
    Alhora de generar el sistema té en compte que el fet de que les molècues siguin finites fa que la capacitat sigui
    limitada i que no poden superposar-se.
    A part d'amb una posició aleatòria, la funció inicialitza les molècules amb l'orientació demanada ('random' / 'parallel').
    No contempla que pugui haver-hi una orientació antiparal·lela.


##############################################################################################################################


FITXER: excitation.py

Plantejam una sèrie de funcions que a partir d'un diccionari que contengui la informació sobre els excitons, modificaran
la llista de molecules excitant les corresponents. Per un bon funcionament aquest diccionari ha de tenir la forma:
    :key: referència de l'estat excitat (han d'anar en consonància amb els estats vàlids on pot estar la molecula)
    :argument: llista de longitud = número d'excitons amb les posicions de cada un. Les posicions són: 'random',
    'first', 'last' i 'centre'.

Funció global que es cridarà: excited_system(). Arguments:
    molecules: llista de les instàncies tipus molecula
    excitons: diccionari amb l'informació sobre els excitons que volem generar (amb la forma esmentada)
    tolerance: paràmetre que usarem alhora de detectar molècules donades unes coordenades (s'explicarà més endavant)
En un doble bulce (sobre el diccionari i sobre la llista que té com argument) agafa un índex de la llista molècules i
l'excita. En cada iteració actualitza la llista dels indexs de les molecules excitades que retornarà.

Funció: get_excited_index(position, centre_list, molecules, tolerance).
    Aquesta funció sols redirigeix a altres funcions segons el paràmetre position. Retorna l'índex triat.

pick_random(centre_list, molecules). Tria un index aleatori de la llista molecules. Passant-li la centre_list
    asseguram que no es repeteixen indexes.

pick_first(centre_list, molecules) i l'anàlega pick_last. Prenen el primer o últim element de la llista. Si aquest ja
    hagués estat triat (suposem en un random) es tria un índex de manera aleatoria. Val a dir, si tenim un sistema ordenat
    aquestes posicions seran cantons de la xarxa si el material és amorf el resultat no serà diferent de demanar una posició
    random. Pentura s'hi guanyaria eficiència.

pick_centre(centre_list, molecules, tolerance). Recórre tota la llista de molècules i agafa la que estigui situada en una
    esfera de radi tolerance centrada en 0. Si tenim un sistema ordenat amb un paràmetre de xarxa donat, la tolerància n'és
    la meitat. Per un sistema amorf la definim com la 30èssima part de la mitjana dels 3 costats.
    Si no tenim cap molècula en aquest entorn (podria donar-se en un sistema amorf) o aquesta ja està excitada pren un
    índex aleatòriament, tot printant un avís de que no tenim cap molècula al centre.

pick_furthest(centre_list, molecules). Recórre tota la llista de molècules i agafa la que estigui situada més lluny del
    punt 0. En el cas de que ja estigui excitada n'agafa una de manera aleatòria.


##############################################################################################################################



FITXER: molecules.py

INICIALITZACIÓ DE LA MOLÈCULA GENÈRICA:
    -state_energies: diccionari amb les energies d'excitació de cada estat de la molècula:
                :key: energia de l'estat excitat
                :argument:  energia de l'estat
    -state: referència de quinn estat exctitat es troba la molècula
    -relaxation_energies: diccionari amb les energies de relaxació de cada estat. Per ara en prenem una fitxa i què depèn
    sols de cada estat.
                :key: energia de l'estat excitat
                :argument:  energia de relaxació de l'estat
    -transition_moment: moment de transició dipolar de la molècula. Donat com un vector (llista de 3 elements) en el
    sistema de referència de la molècula.

Per defecte venen donats:
    -characteristic_length: defineix les dimensions finites de la molècula. Aquesta s'aproxima com una línia, quadrat o
    cub i aquest paràmetre en defineix el costat. Alternativament podriem fer una aproximació esfèrica i que en sigui
    el radi.
    -coordinates. D'entrada la suposam en l'origen.
    -orientation. D'entrada la suposam orientada segons [1, 0, 0]. Aquest vector ve donat en un SR extern que
    anomenarem global.
    Aquests dos darrers paràmetres no són estrictament necessaris per estudiar la naturalesa del tipus de molècula.
    La classe inclou 2 mètodes per cada un d'aquests 2 darrers paràmetres. Un per inicialitzar-los (defineix de manera
    la posició/orientació com un 3-array) i un per cridar-los alhora d'operar (per assegurar que no s'alteren en el procés).
    Noms:
    initialize_coordinates(coordinates)                  initialize_orientation(orientation)
    molecular_coordinates()                              molecular_orientation()

Mètodes de la molècula:
Apart dels 4 ja comentats la classe molècula inclou:
    - get_relaxation_state_energy. Mètode que dóna l'energia de relaxació de l'estat en què es troba la molècula
    ### MÈTODE PER CANVIAR L'ESTAT ?? ###
    - decay_rates: mètode que retorna un diccionari amb els possibles rates de decaïment {'decay process': rate}
    - get_transition_moment(reference_orientation). Necessita com argument un vector de referència. L'orientació de la
        molècula en la qual el moment de transició en el SR de la molècula i en el SR global coindideixen.
        Aleshores, donada aquesta referència i l'orientació de la molècula, aquest mètode fa un canvi de base i retorna
        el moment de transició dipolar en el SR global.