Fitxer explicatiu de la lògica de la funció update_system.

MOTIVACIÓ:
Aquesta funció s'encarrega de, donat el sistema (system), fer un pas del KMC i actualitzar el diccionari system.
És per tant la funció master del programa principal i és per això que la seva estructura i la de les funcions que crida
no ha de variar en el temps i ha de ser independent de quin sistema es definesqui, quina excitació es propagui i de com
es calculen els rates dels diferents processos. En definitiva, ha de constituïr un algorisme INDEPENDENT DEL PROBLEMA
FÍSIC plantejat.

FUNCIÓ: update_system()
    Únic argument necessari: system. Diccionari que conté:
        Llista de molècules
        Condicions físiques del sistema
        Llista amb els índexs de les molècules excitades

La funció itera sobre la llista de les molècules excitades:
    1. Cerca els veïns dins d'un radi que ve definit en el diccionari de les condicions físiques (funció neighbourhood)
    2. Dóna els camins possibles que pot seguir aquest excitó i els rates corresponents (funció get_rates_and_processes)
    3. Ajunta tots els rates i processos de totes els excitons un una llista única per cada un i sobre aquestes
        tria un procés per l'algorisme de Kinetic MonteCarlo. (funció kmc_algorithm)
    4. Actualitza el sistema amb la informació del camí triat (update_step)
    5. Retorna la variable del camí triat i el temps que ha passat.

FORMAT: el camí triat així com la informació sobre els processos es dóna en forma de diccionari tipus:
    {'donor': índex del donant, 'process': etiqueta del procés, 'acceptor': índex de l'acceptor}


#########################################################
El fitxer inclou una segona funció que es crida en el programa principal: check_finish(chosen_process).
Aquesta mira si el procés triat és de decaïment. Pensant en el cas de que pugui existir més d'un decay, a fi de no
incloure una entrada per cada procés simplement comprova si l'índex del donant i l'acceptor són el mateix.

(Veure com es construeix aquest tipus de variable, process, per millor enteniment)


#########################################################
Funcions auxiliars de update_systems():

neighbourhood(centre, molecules, radius=1.05)
La funció busca quantes molècules estan en un entorn esfèric/circular de radi radius (que per defecte, com que el
paràmetre de xarxa és 1, el prenem 1.05).
Inclou un avís per a què es revisi el radi en el cas de que no es trobin veïns.

Detall computacional important. Al imposar que la distància entre les dues molècules sigui menor a radius és important
excloure el 0. D'altra banda inclouriem dins dels possibles acceptors la propia molècula excitada, i no interessa.
(Podria interessar i fàcilment es podria arreglar l'algorisme perquè en aquesta llista de veïns s'inclogués la pròpia
molècula excitada i posar condicions perquè en aquest cas prengui els rates de decaïment enlloc dels de transfarència,
però no hem tirat per aquí).


get_rates_and_processes(centre, neighbourhood, system)
Aquesta funció és la que dirigeix al fitxer processes per calcular els rates i a quin procés corresponen.
Les funcions que fan els càlculs explícits s'expliquen al document explicatiu del folder processes.

Procediment de la funció:
    1. Dóna un diccionari per cada veí amb els rates de transfarència: {'transfer_procés': rate}
    2. Construeix un diccionari de diccionaris on les entrades són els índexs dels veïns i els arguments els diccionaris
        abans esmentats.
    3. Crida la funció que dóna els rates de decaïment del centre: {'decay_process': decay_rate}
    4. Separa els rates (sols els seus valors numèrics) i els processos (informació del tipus i les molècules afectades)
        en dues llistes separades.
Les darreres llistes esmentades són el return de la funció.


process_rate_splitter(transfer_rates, decay_rates, centre):
Aquesta funció és la que s'encarrega de separar els diccionaris que donen les funcions get_transfer_rates i
get_decay_rates en dues llistes: rate_list i process_list. A més d'assegurar un format únic per tots els processos.

L'algorisme de separació no és el mateix en els dos casos ja que les estructures són diferents (pel cas del diccionari
es necessita un doble bucle ja que és un diccionari de diccionaris).

El format final que es construeix és:
    rate_list: llista amb els valors numèrics dels rates
    process_list: llista amb els processos. Els processos es donen en el format:
        {'donor': índex del donant, 'process': etiqueta del procés, 'acceptor': índex de l'acceptor}


Comentari sobre la funció update_step(). Com que aquesta funció ha de tenir en compte explicítament quins processos
tenim definits (i per tant depèn del problema físic que se simuli) es defineix en el fitxer processes.py

kmc_algorithm. En el fitxer kmc_implementation es troba definit i explicat l'algorisme del Kinetic MonteCarlo
