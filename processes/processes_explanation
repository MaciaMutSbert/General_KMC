Document de text per explicar les funcions de la carpeta processes.

COMENTARI INICIAL: Els estats (fonamental i excitats) s'indicaran per mitjà d'etiquetes tipus string. Els estats possibles
i les seves respectives referències hauran de venir indicades a l'inici del programa, e.g, quan s'inicialitzi la
molècula genèrica. Aquestes referències s'usaran per caracteritzar la variable estat i per simplicitat i eficiència
s'usaran com a claus dels diccionaris que contenguin informació sobre els excitons. A saber: state_energies,
relaxation_energies, exciton_energies, (REFERENTS A RATES...).

ESTATS POSSIBLES:
    ESTAT FONAMENTAL: 'g_s'
    SINGLET 1: 's_1


Aquesta carpeta recull les funcions en què apareixen explicitament els processos de transfarència i decaïment possible
a fi de què si se'n ha d'afegir o llevar algun només calgui modificar aquests fitxers sense que l'estructura de la resta
del programa es vegi afectada.

PROCESSOS POSSIBLES:
    SINGLET_1 TRANSFER: 's_1_g_s'
    SINGLET_1 RADIATIVE DECAY: 'Singlet_radiative_decay'


##########################################################################################
FITXER: processes.py

És el fitxer principal de la carpeta i inclou les funcions que seran cridades en altres parts del programa.
Dues d'aquestes funcions són anàlogues: get_transfer_rates i get_decay_rates. Aquestes són anteriors al KMC, és més
donen els rates que més endavant seran usats en l'algorisme.
La tercera, update_step és una funció que actualitza el sistema segons el procés que s'hagi triat en el KMC. Per tant,
s'usa a posteriori.

############################################################
get_transfer_rates(centre, neighbour_index, system):

Aquesta funció rep com arguments els índexos del donant (molècula excitada que anomenam centre) i d'un possible
acceptor (un dels seus veïns) a més del diccionari system que recull tota la informació del sistema (interessaran
la llista de molecules i les condicions físiques).

El retorn d'aquesta funció és un diccionari amb tots els possibles processos entre el donant i l'acceptador:
        transfer_rates = {'transfer_process': transfer_rate}

Procediment de l'algorisme:
Per ara (01/08/2019), només contemplam la transfarència d'un singlet o d'un triplet a una molècula en l'estat fonamental.
    -Defineix els objected donor, acceptor (classe Molecule) i el diccionari conditions.
    -Calcula el solapament espectral amb la fórmula de Marcus. (Funció auxiliar)
    -Calcula l'acoplament electrònic usant un diccionari de funcions on aquests estan definits (Fitxer auxiliar)
    -Amb aquests dos factors calcula el rate de transfarència.
    - Retorna un diccionari amb la referència del procés com a clau i el rate en ns^-1 com argument.


IMPORTANT. DEFINICIÓ DE LES CLAUS.
    Les referències dels possibles processos de transfarència seran les que s'usaran com a claus dels diccionaris
    transfer_rates i couplings. Així com les que s'usaran per identificar com s'ha d'actualitzar el sistema. És per això
    que s'ha de seguir un conveni. La clau es construirà com: 'state1_state2' i farà referència a una excitació en state1
    que es propaga a una molècula en state2. E.g, si tenim la propagació d'un singlet_1 a una molècula en l'estat
    fonamental la clau del procés serà: 's_1_g_s'.
Aquesta informació no és necessaria de cara a un usuari que faci servir sols la interfície més externa, doncs aquest sols
ha de saber les referències de cada estat. Les etiquetes de cada procés es construïran externament i en cap moment tendrà
opció de canviar-les. Eventualment les veurà per pantalla. Fóra bo que sabés el significat d'aquestes.


############################################################
get_decay_rates(system, centre):

La funció rep com arguments el diccionari system i l'índex de la molecula excitada (centre).

El retorn és el mateix que del mètode de la classe Molecule per decay_rates():
    Diccionari: decay_rates = {'decay_process': decay_rate}

Totes les molècules són còpies d'una instància genèrica clonada de la qual canviam l'orientació i la posició en
l'espai. Per tant, el rate de decaïment de qualsevol estat dependrà sols de variables internes de la molècula. Es pot
caracteritzar únicament amb l'estat excitat.
Per això introduïm una certa memòria al programa amb el diccionari decay_memory. En calcular el decay_rate d'un estat,
es guardarà el valor en aquest diccionari (de fet es guarda el diccionari que volem per retorn).La clau vendrà la
definim com el hash de l'estat excitat.

Aleshores el procediment serà:
    - Mirar si la molècula està en un estat del qual tenim el rate calculat. Si és així agafar el valor ja calculat
    de decay_memory.
    - En cas contrari, cridar el mètode decay_rates() que retorna un diccionari {'decay_process': decay_rate}
    i guardar-lo amb el nou estat el decay_memory.


############################################################
update_step(chosen_proces, system):

A partir del chosen_procés que és un diccionari tipus {'donor': index del donant, 'process': etiqueta del procés,
'acceptor': índex de l'acceptor} i de la llista molecules, canvia els estats del donador i l'acceptor segons el
procés triat.

Per un procés de transfarència, l'acceptor passa a l'estat excitat corresponent i el donant decau.
Per un de decaïment el donador i l'acceptor són iguals i es passa l'estat del donant al fonamental.


###################################################################################################################
FUNCIONS AUXILIARS:


marcus_overlap_formula(donor, acceptor, conditions):
Aquesta funció retorna el solapament espectral entre les dues molècules segons la fórmula de Marcus que se serveix
de la temperatura (conditions['temperature']) l'energia de relaxació de l'estat excitat del donant (??) i de la
diferència d'energia (lliure de Gibbs) entre l'estat en què es troba l'excitó i l'estat al què es transferirà.

D'igual manera que amb els rates de decaïment introduïm un diccionari overlap_memory que emmagatzerà els càlculs que
s'hagin fet. La clau serà el hash de (temperatura, energia de relaxació, diferència d'energia lliure, 'Marcus'). De tal manera
que per una situació amb els mateixos paràmetres s'usi el resultat ja calculat.


##################################################################################################################
FITXER AUXILIAR: coupling_functions.py

En aquest arxiu contruïm un diccionari amb les funcions per calcular els acoplaments electrònics entre el donant i
l'acceptor. Totes aquestes funcions rebran els mateixos arguments: molecule1 (donor), molecule2 (acceptor) i el diccionari amb
les condicions físiques del sistema (conditions). Consta de 3 parts diferenciades:
        Definició de les funcions que calcularan els diferents acoplaments electrònics
        Definició del diccionari i les seves claus
        Definició d'una sèrie de funcions auxiliars.
A més definim un diccionari, coupling_memory, que anirà guardant els acoplaments calculats i serà usat en cas de que
ja estigui calculat.
A l'inici del document consten les possibles CLAUS de TRANSFARÈNCIA.

DICCIONARI
01/08/2019. Una entrada: 's_1_g_s': compute_forster_coupling


##########################################################
compute_forster_coupling(donor, acceptor, conditions):

La funció retorna l'acoplament electrònic calculat segons l'aproximació dipol-dipol de Förster.
Si el hash de la tupla (moment del donor, moment de l'acceptor, distància, 'Förster') és clau del diccionari
coupling_memory, aleshores ja ha estat calculat i reaprofitam el valor. Per cas contrari el calcula i crea una nova
entrada del diccionari de memòria.


############################################################
FUNCIONS AUXILIARS DEL SEGON FITXER:

S'usen en els càlculs dels acoplaments electrònics.

intermolecular_distance(donor, acceptor)
Retorna la distància entre les dues molecules en unitats atòmiques.


unity(vector):
Donat un vector en retorna un d'unitari en la mateixa direcció i sentit.


orientational_factor(moment del donor, moment de l'acceptor, distància intermolecular):
Donats els momets dipolars de transició i la distància entre les dues molecules retorna el factor d'orientació
(coeficiennt adimensional).

